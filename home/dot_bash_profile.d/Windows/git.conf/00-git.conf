#!/usr/bin/env bash
#
# Initial setup for Git on Windows.
# Will attempt to wrap git in a function if it is a Windows version.
#

__profile_cache_ok $@ || return ${__profile_cache_needed}
__profile_bash_require 3.0 || return 1

__find_git() {
    echo "# find-git"

    # SPECIAL: If we're in the MINGW Git Bash, we DO NOT WANT to wrap it.
    # ONLY if we're in a different one (MSYS/Cygwin/etc.) do we want to wrap it.
    
    # ASSUMPTION: MINGW git will translate paths for us, MSYS2/Cygwin git won't.
    case "${os_subtype}" in
        mingw)
            echo "# 'git' will be MinGW; do not wrap"
            return
            ;;
    esac

    local gitexe=$(command -v git 2>/dev/null)
    case "${gitexe}" in
        '')
            # not in PATH, give up
            echo "# 'git' not in PATH"
            return
            ;;

        'git')
            # It's an alias, give up
            echo "# 'git' command is an alias"
            return
            ;;

        '/usr/*' | '/mingw*')
            # Unix-y git.  We want Windows-y git to avoid issues.
            echo "# 'git' command is unix-y"
            ;;

        *)
            # Windows-y git.  We're good.
            echo "# 'git' command is windows-y"
            ;;
    esac

    # Windows-y git.  Add a 'git' function to map all paths.
    cat <<EOT
function git() {
    local -r progpath='${gitexe}'"
    local -a args
    while [[ \$# -gt 0 ]] ; do
        if [[ \$1 =~ ^/ ]] ; then
            args+=("$(os_get_safe_fullpath "\$1")")
        else
            args+=("\$1")
        fi
        shift
    done
    export -f 'git'
}
EOT


}

__find_git
unset __find_git
echo "# DONE"
