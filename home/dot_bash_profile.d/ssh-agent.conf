#!/usr/bin/env bash
#
# SSH environment setup
#

# Only interactive please
__profile_is_os_interactive || return 1

# Special OS handling
case "${os_type}" in
    'Windows')
        # Windows 10 (1903?+) has ssh-agent built in.
        # If it is present, then do nothing.
        # We can't start it (as it's a Windows service that requires administrative access)
        command -v "${os_windows_sysdir}/OpenSSH/ssh-agent" >/dev/null && return 0

        # Older version of Windows; fall through
        ;;
esac

# Find ssh-agent.  Not every machine has it.
declare ssh_agent="$(command -v ssh-agent)"
[ -z "${ssh_agent}" ] && return 1

declare __ssh_home="${HOME}/.ssh"
declare __ssh_cache="${XDG_CACHE_ROOT:-${HOME}/.cache}/ssh-agent/${HOSTNAME}"  # MUST be machine-specific
declare __ssh_lock="${__ssh_cache}/ssh-environment.lock"
declare __ssh_environment="${__ssh_cache}/ssh-environment"

function __ssh_start_agent {
    # Ensure the directory exists
    __profile_mkdirif "${__ssh_cache}"

    if [ -e "${__ssh_lock}" ] ; then
        __profile_debug "[ssh-agent] ssh lock exists"
        return 1
    fi

    echo 'Cygwin' > "${__ssh_lock}" 2>/dev/null
    if [ $? -ne 0 ] ; then
        __profile_debug "[ssh-agent] ssh lock did not exist but cannot be written"
        return 2
    fi


    "${ssh_agent}" | sed 's/^echo/#echo/' > "${__ssh_environment}"
    local ret=$?
    __profile_debug "[ssh-agent] ssh-agent: returned $ret"
    if [ $ret -eq 0 ] ; then
        chmod 600 "${__ssh_environment}"
        . ${__ssh_environment} > /dev/null
        # auto-add default SSH key(s)
        if [ -e "${__ssh_home}/id_rsa" -o -e "${__ssh_home}/id_dsa" -o -e "${__ssh_home}/id_ecdsa" ] ; then
            ssh-add
        fi
    fi

    rm -rf "${__ssh_lock}"
    return $ret
}

function __ssh_find_agent {
    #ps ${SSH_AGENT_PID} doesn't work under cygwin OR msys
    #ps -p ${SSH_AGENT_PID} doesn't work under msys
    case "${os_type}.${os_subtype}" in
        Windows.Msys)
            ps | grep " ${SSH_AGENT_PID} .*ssh-agent$'" > /dev/null
            ;;
        *)
            ps -p ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null
            ;;
    esac
}

# Source SSH settings, if applicable
# in the event multiple shells start simultaneously, try up to n times
declare -i __ssh_attempts=5
while [[ $((__ssh_attempts--)) -gt 0 ]] ; do
    if [ -f "${__ssh_environment}" ]; then
        . ${__ssh_environment} > /dev/null
        if [ -n "${SSH_AGENT_PID+${SSH_AGENT_PID}}" ] ; then
            if __ssh_find_agent ; then
                __profile_debug "[ssh-agent] ssh-agent found"
                break
            elif __ssh_start_agent; then
                __profile_debug "[ssh-agent] ssh-agent started (cached)"
                break
            else
                __profile_debug "[ssh-agent] ssh-agent NOT started (cached)"
            fi
        else
            __profile_debug "[ssh-agent] ssh-agent: no pid"
        fi
    elif __ssh_start_agent; then
        __profile_debug "[ssh-agent] ssh-agent started (uncached)"
        break
    else
        __profile_debug "[ssh-agent] ssh-agent NOT started (uncached)"
    fi

    sleep 0.1
done

unset __ssh_attempts __ssh_lock __ssh_cache __ssh_environment __ssh_find_agent __ssh_start_agent

