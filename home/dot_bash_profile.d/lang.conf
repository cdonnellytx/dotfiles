#!/usr/bin/env bash
#
# Sets up global values in convenient environment vars
#

# @public
# @lifecycle=persistent
# Gets the currently active language.
# @seealso LANG
function get_lang() {
    echo "${LANG}"
}

# @public
# @lifecycle=persistent
# Sets the active language for the shell.
# @param {string...} language   A list of languages to attempt to use.  The first valid one will be used.
# @returns 0 on successfully setting the language
# @returns 1 if no language is valid
# @returns 2 invalid input
# @seealso LANG
function set_lang() {
    if [ $# -eq 0 ]; then
        echo>&2 "Usage: set_lang [LANGUAGE]..."
        return 2
    fi

    local lang
    for lang; do
        # See if we can even set to this language.
        # Bash will warn if you set LC_ALL to something invalid, but the only way to detect it is to read stderr.
        # Note that setting a variable -- even exporting it -- in a $() block does not go outside that block's scope,
        # so it won't screw up our environment.
        local failmsg=$(export LC_ALL="${lang}" 2>&1)
        if [ -n "${failmsg}" ] ; then
            continue
        fi

        # We're good; set it.
        export LC_ALL="${lang}"
        export LC_CTYPE="${lang}"
        export LC_NUMERIC="${lang}"
        export LC_TIME="${lang}"
        export LC_COLLATE=C
        export LC_MONETARY="${lang}"
        export LC_MESSAGES="${lang}"
        export LC_PAPER="${lang}"
        export LC_NAME="${lang}"
        export LC_ADDRESS="${lang}"
        export LC_TELEPHONE="${lang}"
        export LC_MEASUREMENT="${lang}"
        export LC_IDENTIFICATION="${lang}"

        export LANG="${lang}"

        return 0
    done

    return 1
}

# Assume sane, let the insane override...
# 99% work with en_US.UTF-8, a small number have C.UTF-8.
if ! set_lang "en_US.UTF-8" "C.UTF-8" ; then
    __profile_warn "Cannot find a reasonable locale."
fi
