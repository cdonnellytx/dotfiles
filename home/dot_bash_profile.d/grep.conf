#!/usr/bin/env bash
#
# Configure GNU grep
#
# Environment variables:
#   Name            Used?   Official?   Description
#   ------------------------------------------------------------------------------------------------------------------------------------
#   GREP_COLOR      N       Y           Deprecated.
#   GREP_COLORS     Y       Y           Specifies colors when output to a tty
#   GREP_OPTIONS    N       Y           Deprecated.
#   grep_options    Y       N           Acts like GREP_OPTIONS used to, but done with a shell function
#                                       so callers who want the official binary can hit it.
#                                       *NOT EXPORTED*
#   grep_version    Y       N           The string version of grep
#

function __profile_grep_setup_env() {
    # BASHCRAP: Bash 3.x, when invoked from screen, will try to reinitialize this variable
    [ -n "${grep_cmd+x}" ] && return

    # executable names
    declare -g grep_cmd='grep'
    declare -g grep_type

    # Determine grep_type
    case "${os_type}" in
        GNU | Linux)
            grep_type=gnu
            ;;
        Windows)
            # Cygwin/Msys/MinGW
            grep_type=gnu
            ;;
        Darwin | SunOS)
            # Darwin (macOS/iOS/etc.) is mixed GNU/BSD combo
            # grep is BSD-style
            grep_type=bsd
            ;;
        *)
            # No idea
            grep_type=unknown
            ;;
    esac

    # If we didn't get a GNU grep, look at other paths
    if [ "${grep_type}" != "gnu" ] ; then
        # Search for other greps
        local d
        for d in ~/bin /usr/local/bin ; do
            if [ -x "${d}/grep" ] ; then
                # ASSUMPTION: it's GNU
                grep_cmd="${d}/grep"
                grep_type='gnu'
                break
            fi
        done
    fi

    export   grep_cmd grep_type
    readonly grep_cmd grep_type
}

# test whether a grep option is available by invoking grep.
# @lifecycle=script
function __profile_grep_flag_available() {
    # 2.20 has everything we care about.
    __profile_version_is "${grep_version}" -ge '2.20' && return 0
    echo | "${grep_cmd}" $1 "" >/dev/null 2>&1
}

# @lifecycle=script
function __profile_grep_init() {

    __profile_grep_setup_env
    # BASHCRAP: Bash 3.x, when invoked from screen, will try to reinitialize this variable
    if [ -n "${grep_version+x}" ] ; then
        __profile_debug "__profile_grep_init: called more than once"
        return
    fi

    local -a grep_options=()

    # ASSUMPTION: We are going to assume that most machines are not stupid and have a modern grep (> 2.5.1).
    declare -a output
    mapfile -n 1 -t output < <("${grep_cmd}" --version)
    declare -g grep_version="${output##* }"

    if [ -z "${grep_version}" ] ; then
        __profile_warn "NO GREP VERSION"
        # --version doesn't work.  Probably BusyBox or a non-GNU grep.
        unset grep_version
        return 1
    fi

    if __profile_grep_flag_available --color=auto ; then
        grep_options+=('--color=auto')
        if [ -z "${GREP_COLORS+x}" ] ; then
            # cdonnelly 2017-03-27: Color palette is chosen below based on several factors:
            #   - Legibility with white-on-black terminals
            #   - Compatibility with mixed usage of bash and PowerShell on Windows
            #     (MSCRAP: PowerShell Desktop's default shell colors, while appearing to be white-on-dark-blue,
            #      are really DarkYellow-on-DarkMagenta terminal colors overridden at display time
            #      to be white-on-blue.)
            #
            # The only one of grep's colors we really need to tweak is the filename color (ANSI magenta aka Windows Console DarkMagenta).
            #
            local filename_color='01;35'  # "light" magenta (default is 00;35 - "dark" magenta)
            export GREP_COLORS="fn=${filename_color}:"
        fi
    fi

    if __profile_grep_flag_available --exclude-dir=.svn; then
        grep_options+=(
            '--exclude-dir=.cvs'        # Various VCS dirs
            '--exclude-dir=.svn'
            '--exclude-dir=.git'
            '--exclude-dir=.hg'
            '--exclude-dir=.snapshot'   # NetApp
        )
    elif __profile_grep_flag_available --exclude=.svn ; then
        grep_options+=(
            '--exclude=.cvs'        # Various VCS dirs
            '--exclude=.svn'
            '--exclude=.git'
            '--exclude=.hg'
            '--exclude=.snapshot'   # NetApp
        )
    fi

    # Export vars
    readonly             grep_version
    export               grep_version
    __profile_debug_vars grep_version

    # cdonnelly 2014-12-08: Because GREP_OPTIONS is now deprecated, we have to do some workarounds.
    # The oh-my-zsh people came up with a workaround that seems to work with (some) bash: https://github.com/robbyrussell/oh-my-zsh/pull/3341
    # Basically:
    #   - replace grep with a shell function
    #   - call the "real" grep with the bash builtin 'command'
    #   - EVAL the function so the grep_options var can be deleted
    __profile_debug_vars grep_options
    if [ ${#grep_options[@]} -gt 0 ] ; then
        eval 'function grep() {
            command '"${grep_cmd}"' '"${grep_options[@]}"' "$@"
        }'
        export -f grep
    fi

    # Cleanup
    unset "${!__profile_grep_@}"
}

__profile_grep_init
