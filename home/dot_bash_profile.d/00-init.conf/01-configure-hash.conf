#!/usr/bin/env bash
#
# Sets CONFIGURE_HASH.
#

if [ -n "${CONFIGURE_HASH+x}" ] ; then
    return
fi

case "${os_type}" in
    Linux)
        # ASSUMPTION: Bash 4.3 or later.
        #
        # On Linux, locally-compiled binaries typically cannot be used on different machines due to slight dependency variations in distros.
        # 
        # Since any such app is installed in our home directory, which in some instances point to a shared home on a variety of machines with different locations for $HOME,
        # any binaries built on the first machine will fail on the second due to hardcoded paths / versions in installed items.
        #
        # The ONLY workaround appears to be to install in different directories.
        # Since we can't just use the value in $HOME because it's a path, we hash the path.
        # Note it is also likely that other OS attributes (subtype/arch/distro) will affect it as well, so let's just add those to the hash.
        #
        # NOTE: cksum outputs two values: the 32-bit checksum, and the length in bytes.
        # We only want the checksum, so store in an intermediate variable and substring it to chop off the formatted length.
        declare configure_hash="$(printf '%8.8x' $(echo "${os_subtype}:${os_arch}:${os_distribution_id}:${os_distribution_version}:${HOME}" | cksum))"
        declare -grx CONFIGURE_HASH="${configure_hash:0:8}"
        ;;

    Windows)
        # ASSUMPTION: Bash 4.3 or later.
        #
        # The main issue that would exist for CONFIGURE_PREFIX/EPREFIX on Windows would be the difference in Unix-alikes (MSYS/MSYS2/Cygwin).
        # We also avoid invoking programs due to all the Unix-alikes having slow process invocation.
        declare -grx CONFIGURE_HASH="${os_subtype}_${os_arch}"
        ;;

    Darwin)
        # ASSUMPTION: Bash 3.2 (because macOS explicitly refuses to carry Bash 4+ due to licensing).
        # LATER: decide what to use.
        ;;

esac

__profile_debug_vars CONFIGURE_HASH

